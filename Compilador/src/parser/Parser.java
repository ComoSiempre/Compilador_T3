
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 31 20:54:36 ART 2015
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.parser;
import java.io.*;
import java.util.ArrayList;
import scanner.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 31 20:54:36 ART 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\005\005\000\002\005\010\000\002\004\003\000" +
    "\002\004\003\000\002\007\010\000\002\011\003\000\002" +
    "\011\003\000\002\010\005\000\002\010\003\000\002\012" +
    "\004\000\002\012\006\000\002\023\006\000\002\020\004" +
    "\000\002\020\002\000\002\021\004\000\002\021\002\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\033\004\000\002\033" +
    "\003\000\002\013\007\000\002\013\011\000\002\014\003" +
    "\000\002\014\003\000\002\015\007\000\002\017\013\000" +
    "\002\016\004\000\002\016\005\000\002\031\005\000\002" +
    "\031\003\000\002\030\003\000\002\030\006\000\002\036" +
    "\005\000\002\036\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\035\005\000\002\035\003\000\002" +
    "\025\003\000\002\025\003\000\002\034\005\000\002\034" +
    "\003\000\002\026\003\000\002\026\003\000\002\037\005" +
    "\000\002\037\003\000\002\027\003\000\002\027\003\000" +
    "\002\032\005\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\040\006\000\002\041\003\000\002\041" +
    "\002\000\002\042\005\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\006\033\013\037\010\001\002\000\004\002" +
    "\170\001\002\000\010\002\ufffc\033\ufffc\037\ufffc\001\002" +
    "\000\010\002\ufffd\033\ufffd\037\ufffd\001\002\000\010\002" +
    "\000\033\013\037\010\001\002\000\004\040\ufff8\001\002" +
    "\000\004\040\014\001\002\000\010\002\ufffe\033\ufffe\037" +
    "\ufffe\001\002\000\004\040\ufff9\001\002\000\010\023\017" +
    "\025\015\027\016\001\002\000\006\033\013\037\024\001" +
    "\002\000\034\002\ufffb\021\ufffb\022\ufffb\025\ufffb\027\ufffb" +
    "\031\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\001\002\000\004\041\020\001\002\000\004" +
    "\024\021\001\002\000\004\027\022\001\002\000\034\002" +
    "\ufffa\021\ufffa\022\ufffa\025\ufffa\027\ufffa\031\ufffa\033\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\001" +
    "\002\000\006\026\ufff6\030\165\001\002\000\006\026\ufff5" +
    "\040\ufff8\001\002\000\004\040\162\001\002\000\004\026" +
    "\030\001\002\000\006\026\ufff3\030\ufff3\001\002\000\004" +
    "\021\032\001\002\000\010\002\ufff7\033\ufff7\037\ufff7\001" +
    "\002\000\032\021\uffee\022\uffee\025\uffee\027\uffee\031\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\001\002\000\032\021\uffec\022\uffec\025\uffec\027\uffec" +
    "\031\uffec\033\013\034\uffec\035\uffec\036\uffec\037\010\040" +
    "\uffec\041\uffec\001\002\000\026\021\032\022\065\025\042" +
    "\027\064\031\047\034\044\035\043\036\066\040\050\041" +
    "\051\001\002\000\032\021\uffef\022\uffef\025\uffef\027\uffef" +
    "\031\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\001\002\000\004\040\037\001\002\000\006" +
    "\023\017\027\016\001\002\000\030\021\uffe2\022\uffe2\025" +
    "\uffe2\027\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\040\uffe2\041\uffe2\001\002\000\026\021\uffed\022\uffed\025" +
    "\uffed\027\uffed\031\uffed\034\uffed\035\uffed\036\uffed\040\uffed" +
    "\041\uffed\001\002\000\010\025\042\040\050\041\051\001" +
    "\002\000\004\025\154\001\002\000\012\025\042\027\152" +
    "\040\050\041\051\001\002\000\030\021\uffea\022\uffea\025" +
    "\uffea\027\uffea\031\uffea\032\uffea\034\uffea\035\uffea\036\uffea" +
    "\040\uffea\041\uffea\001\002\000\042\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\024\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\001\002\000\004\025\143\001\002\000\050\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\023\132" +
    "\024\uffda\025\131\026\uffda\027\uffda\030\uffda\001\002\000" +
    "\042\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\024" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\001\002\000\004\027\130" +
    "\001\002\000\030\021\uffe7\022\uffe7\025\uffe7\027\uffe7\031" +
    "\uffe7\032\uffe7\034\uffe7\035\uffe7\036\uffe7\040\uffe7\041\uffe7" +
    "\001\002\000\042\005\112\006\111\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb\001\002\000" +
    "\032\007\115\011\125\013\121\014\114\015\116\016\120" +
    "\017\117\020\124\024\uffd7\026\uffd7\027\uffd7\030\uffd7\001" +
    "\002\000\036\007\uffcf\010\103\011\uffcf\012\105\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\024\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\001\002\000\012\024\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\001\002\000\030\021\uffeb\022\uffeb\025" +
    "\uffeb\027\uffeb\031\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\040\uffeb\041\uffeb\001\002\000\030\021\uffe9\022\uffe9\025" +
    "\uffe9\027\uffe9\031\uffe9\032\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\040\uffe9\041\uffe9\001\002\000\030\021\uffe8\022\uffe8\025" +
    "\uffe8\027\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\040\uffe8\041\uffe8\001\002\000\030\021\uffe1\022\uffe1\025" +
    "\uffe1\027\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\040\uffe1\041\uffe1\001\002\000\030\021\uffe5\022\uffe5\025" +
    "\uffe5\027\uffe5\031\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\040\uffe5\041\uffe5\001\002\000\036\002\ufff0\021\ufff0\022" +
    "\ufff0\025\ufff0\027\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\001\002\000" +
    "\004\025\073\001\002\000\042\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\024\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\001\002\000\044\004\071\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3\001" +
    "\002\000\010\025\042\040\050\041\051\001\002\000\012" +
    "\024\uffdc\026\uffdc\027\uffdc\030\uffdc\001\002\000\010\025" +
    "\042\040\050\041\051\001\002\000\004\030\075\001\002" +
    "\000\010\025\042\040\050\041\051\001\002\000\004\030" +
    "\077\001\002\000\010\025\042\040\050\041\051\001\002" +
    "\000\004\026\101\001\002\000\024\021\032\025\042\027" +
    "\064\031\047\034\044\035\043\036\066\040\050\041\051" +
    "\001\002\000\030\021\uffdf\022\uffdf\025\uffdf\027\uffdf\031" +
    "\uffdf\032\uffdf\034\uffdf\035\uffdf\036\uffdf\040\uffdf\041\uffdf" +
    "\001\002\000\010\025\uffca\040\uffca\041\uffca\001\002\000" +
    "\010\025\042\040\050\041\051\001\002\000\010\025\uffc9" +
    "\040\uffc9\041\uffc9\001\002\000\042\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\024\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\001\002\000\042\005\112\006\111\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\001\002" +
    "\000\010\025\042\040\050\041\051\001\002\000\010\025" +
    "\uffc5\040\uffc5\041\uffc5\001\002\000\010\025\uffc6\040\uffc6" +
    "\041\uffc6\001\002\000\042\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\024\uffc8\026\uffc8\027\uffc8\030\uffc8\001" +
    "\002\000\010\025\uffd5\040\uffd5\041\uffd5\001\002\000\010" +
    "\025\uffce\040\uffce\041\uffce\001\002\000\010\025\uffd6\040" +
    "\uffd6\041\uffd6\001\002\000\010\025\uffd3\040\uffd3\041\uffd3" +
    "\001\002\000\010\025\uffd4\040\uffd4\041\uffd4\001\002\000" +
    "\010\025\uffd2\040\uffd2\041\uffd2\001\002\000\010\025\042" +
    "\040\050\041\051\001\002\000\010\025\042\040\050\041" +
    "\051\001\002\000\010\025\uffd1\040\uffd1\041\uffd1\001\002" +
    "\000\010\025\uffcd\040\uffcd\041\uffcd\001\002\000\036\007" +
    "\uffd0\010\103\011\uffd0\012\105\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\024\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\001\002\000\016\007\115\011\125\024\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\001\002\000\030\021\uffe6\022\uffe6\025" +
    "\uffe6\027\uffe6\031\uffe6\032\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\040\uffe6\041\uffe6\001\002\000\012\025\042\026\uffbe\040" +
    "\050\041\051\001\002\000\010\025\042\040\050\041\051" +
    "\001\002\000\004\024\134\001\002\000\044\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\024\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\001\002\000\006\026\uffbf\030\141" +
    "\001\002\000\006\026\uffbc\030\uffbc\001\002\000\004\026" +
    "\140\001\002\000\042\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\024\uffc0\026\uffc0\027\uffc0\030\uffc0\001\002" +
    "\000\010\025\042\040\050\041\051\001\002\000\006\026" +
    "\uffbd\030\uffbd\001\002\000\010\025\042\040\050\041\051" +
    "\001\002\000\004\026\145\001\002\000\024\021\032\025" +
    "\042\027\064\031\047\034\044\035\043\036\066\040\050" +
    "\041\051\001\002\000\030\021\uffe4\022\uffe4\025\uffe4\027" +
    "\uffe4\031\uffe4\032\147\034\uffe4\035\uffe4\036\uffe4\040\uffe4" +
    "\041\uffe4\001\002\000\024\021\032\025\042\027\064\031" +
    "\047\034\044\035\043\036\066\040\050\041\051\001\002" +
    "\000\030\021\uffe3\022\uffe3\025\uffe3\027\uffe3\031\uffe3\032" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\001\002" +
    "\000\004\027\153\001\002\000\030\021\uffde\022\uffde\025" +
    "\uffde\027\uffde\031\uffde\032\uffde\034\uffde\035\uffde\036\uffde" +
    "\040\uffde\041\uffde\001\002\000\030\021\uffdd\022\uffdd\025" +
    "\uffdd\027\uffdd\031\uffdd\032\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\040\uffdd\041\uffdd\001\002\000\010\025\042\040\050\041" +
    "\051\001\002\000\004\026\156\001\002\000\024\021\032" +
    "\025\042\027\064\031\047\034\044\035\043\036\066\040" +
    "\050\041\051\001\002\000\030\021\uffe0\022\uffe0\025\uffe0" +
    "\027\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036\uffe0\040" +
    "\uffe0\041\uffe0\001\002\000\004\026\161\001\002\000\042" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\024\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\001\002\000\010\023\163\026" +
    "\ufff2\030\ufff2\001\002\000\004\024\164\001\002\000\006" +
    "\026\ufff1\030\ufff1\001\002\000\006\033\013\037\010\001" +
    "\002\000\006\026\ufff4\030\ufff4\001\002\000\010\002\uffff" +
    "\033\uffff\037\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\016\002\003\003\006\004\010\005\005\006" +
    "\011\007\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\010\005\005\006\166\007" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\024\010\022\011\025\012\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\030\001\001\000\002\001\001\000\004\020\032\001\001" +
    "\000\010\004\035\005\034\021\033\001\001\000\042\013" +
    "\060\014\061\015\037\016\052\017\062\022\040\023\044" +
    "\030\067\031\051\032\045\033\057\034\055\035\054\036" +
    "\056\037\053\040\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\030\067\031\157\032\045\034\055\035\054" +
    "\036\056\037\053\040\066\001\001\000\002\001\001\000" +
    "\022\030\067\031\150\032\045\034\055\035\054\036\056" +
    "\037\053\040\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\107\001" +
    "\001\000\006\024\121\025\122\001\001\000\004\026\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\067\031\071\032\045\034\055" +
    "\035\054\036\056\037\053\040\066\001\001\000\002\001" +
    "\001\000\022\030\067\031\073\032\045\034\055\035\054" +
    "\036\056\037\053\040\066\001\001\000\002\001\001\000" +
    "\022\030\067\031\075\032\045\034\055\035\054\036\056" +
    "\037\053\040\066\001\001\000\002\001\001\000\022\030" +
    "\067\031\077\032\045\034\055\035\054\036\056\037\053" +
    "\040\066\001\001\000\002\001\001\000\042\013\060\014" +
    "\061\015\037\016\052\017\062\022\101\023\044\030\067" +
    "\031\051\032\045\033\057\034\055\035\054\036\056\037" +
    "\053\040\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\030\105\032\045\037\106\040\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\107\001\001" +
    "\000\010\030\105\032\112\040\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\030\105\032\045" +
    "\034\055\035\126\037\053\040\066\001\001\000\014\030" +
    "\105\032\045\034\125\037\053\040\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\103\001\001\000" +
    "\004\025\122\001\001\000\002\001\001\000\026\030\067" +
    "\031\135\032\045\034\055\035\054\036\056\037\053\040" +
    "\066\041\136\042\134\001\001\000\022\030\067\031\132" +
    "\032\045\034\055\035\054\036\056\037\053\040\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\030\067\031\141\032\045\034\055\035\054\036\056" +
    "\037\053\040\066\001\001\000\002\001\001\000\022\030" +
    "\067\031\143\032\045\034\055\035\054\036\056\037\053" +
    "\040\066\001\001\000\002\001\001\000\042\013\060\014" +
    "\061\015\037\016\052\017\062\022\145\023\044\030\067" +
    "\031\051\032\045\033\057\034\055\035\054\036\056\037" +
    "\053\040\066\001\001\000\002\001\001\000\042\013\060" +
    "\014\061\015\037\016\052\017\062\022\147\023\044\030" +
    "\067\031\051\032\045\033\057\034\055\035\054\036\056" +
    "\037\053\040\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\067" +
    "\031\154\032\045\034\055\035\054\036\056\037\053\040" +
    "\066\001\001\000\002\001\001\000\042\013\060\014\061" +
    "\015\037\016\052\017\062\022\156\023\044\030\067\031" +
    "\051\032\045\033\057\034\055\035\054\036\056\037\053" +
    "\040\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\024\012\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String cadena = " "; /* contiene la cadena de producciones */

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error Sintactico \n");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m.append("El ultimo simbolo detectado fue: ["+(String)s.value+"]");
            if (s.left >= 0) {                
                m.append(" en linea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        //m.append(" : "+message + " -> Parser");
        System.err.println(m);
    }
/*
    public void syntax_error(Symbol s){
        System.err.println("Se ha detectado un error sintactico " + s.left + " columna " + s.right); 
    }
*/
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arg_list ::= expression 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "arg_list ::= expression \n"+this.parser.cadena;
                                //primer argumento, creo el nodo e ingreso la expresion a la lista.
                                Call lista = new Call();
                                lista.agregarArgumento(e);
                                RESULT=lista;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arg_list ::= arg_list COMA expression 
            {
              Nodo RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo al = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "arg_list ::= arg_list COMMA expression \n"+this.parser.cadena;
                                if(e != null){
                                    ((Call)al).agregarArgumento(e);
                                }
                                RESULT=al;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // args ::= 
            {
              Nodo RESULT =null;
		
                                this.parser.cadena = "args ::= EMPTY \n"+this.parser.cadena;
                                RESULT=new Call();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // args ::= arg_list 
            {
              Nodo RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo al = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "args ::= arg_list \n"+this.parser.cadena;
                                RESULT=al;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // call ::= ID PARENT_IZQ args PARENT_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo ar = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                this.parser.cadena = "call ::= ID:id PARENT_IZQ args PARENT_DER \n"+this.parser.cadena;
                                //se ingresa la id al nodo en ascenso.
                                ((Call)ar).setID(id);
                                RESULT=ar;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= NUM 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "exp ::= NUM \n"+this.parser.cadena;
                                //creo el nodo var que guardara el numero.
                                RESULT=new Var(Integer.parseInt(num));
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= call 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "exp ::= call \n"+this.parser.cadena;
                                RESULT=c;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= var 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "exp ::= var \n"+this.parser.cadena;
                                RESULT=v;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= PARENT_IZQ expression PARENT_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                this.parser.cadena = "exp ::= PARENT_IZQ expression PARENT_DER \n"+this.parser.cadena;
                                RESULT=e;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // powop ::= EXPO_2 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "powop ::= EXPO2 \n"+this.parser.cadena;
                                RESULT=e2;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("powop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // powop ::= EXPO_1 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "powop ::= EXPO1 \n"+this.parser.cadena;
                                RESULT=e1;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("powop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= exp 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "factor ::= exp \n"+this.parser.cadena;
                                RESULT=e;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= factor powop exp 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "factor ::= factor powop exp \n"+this.parser.cadena;
                                RESULT=new Expression(f,p,e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mulop ::= DIVISION 
            {
              String RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "mulop ::= DIV \n"+this.parser.cadena;
                                RESULT=div;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mulop ::= MULTIPLICACION 
            {
              String RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "mulop ::= MULT \n"+this.parser.cadena;
                                RESULT=mu;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "term ::= factor \n"+this.parser.cadena;
                                RESULT=f;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term mulop factor 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "term ::= term mulop factor \n"+this.parser.cadena;
                                //se crea el nodo expression.
                                Expression exp = new Expression(e,m,f);
                                //se calcula el valor de la operacion.
                                exp.calculoValor();
                                RESULT=exp;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // addop ::= RESTA 
            {
              String RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "addop ::= RESTA \n"+this.parser.cadena;
                                RESULT=res;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // addop ::= SUMA 
            {
              String RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "addop ::= SUMA \n"+this.parser.cadena;
                                RESULT=sum;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additive_expression ::= term 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "additive_expression ::= term \n"+this.parser.cadena;
                                RESULT=t;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // additive_expression ::= additive_expression addop term 
            {
              Nodo RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo ae = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "additive_expression ::= additive_expression addop term \n"+this.parser.cadena;
                                //se crea el nodo expresion.
                                Expression e = new Expression(ae,a,t);
                                //se calcula el valor de la operacion.
                                e.calculoValor();
                                RESULT=e;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relop ::= DISTINTO 
            {
              String RESULT =null;
		int disleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int disright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dis = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "relop ::= NEQ \n"+this.parser.cadena;
                                RESULT=dis;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relop ::= IGUALIGUAL 
            {
              String RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ii = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "relop ::= EQ \n"+this.parser.cadena;
                                RESULT=ii;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relop ::= MAYIGUAL 
            {
              String RESULT =null;
		int mayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String may = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "relop ::= GEQ \n"+this.parser.cadena;
                                RESULT=may;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relop ::= MAYOR 
            {
              String RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ma = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "relop ::= GT \n"+this.parser.cadena;
                                RESULT=ma;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relop ::= MENOR 
            {
              String RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String men = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "relop ::= LT \n"+this.parser.cadena;
                                RESULT=men;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relop ::= MENIGUAL 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "relop ::= LEQ \n"+this.parser.cadena;
                                RESULT=me;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_expression ::= additive_expression 
            {
              Nodo RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo ae = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "simple_expression ::= additive_expression \n"+this.parser.cadena;
                                RESULT=ae;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_expression ::= additive_expression relop additive_expression 
            {
              Nodo RESULT =null;
		int ae1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ae1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo ae1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ae2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ae2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo ae2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "simple_expression ::= additive_expression relop aditive_expression \n"+this.parser.cadena;
                                //se crea el Nodo expresion con la nueva operacion.
                                Expression e = new Expression(ae1, r.toString(), ae2);
                                //es una expresion de comparacion, por lo que se le da true al flag(importante para derivar los resultados de operaciones).
                                e.setEsComparacion(true);
                                RESULT=e;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var ::= ID CORCH_IZQ expression CORCH_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                this.parser.cadena = "var ::= ID LSQUAREB expression RSQUAREB \n"+this.parser.cadena;
                                RESULT= new Var(id,e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "var ::= ID \n"+this.parser.cadena;
                                //se crea el nodo Var.
                                RESULT= new Var(id);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= simple_expression 
            {
              Nodo RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo se = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "expression ::= simple_expression \n"+this.parser.cadena;
                                RESULT=se;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= var ASSIGN expression 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "expression ::= var ASSIGN expression \n"+this.parser.cadena;
                                //creo el nodo expression.
                                Expression exp = new Expression(v,a,e);
                                //asigno el valor a la expresion.
                                exp.asignarValor();
                                RESULT=exp;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return_stmt ::= RETURN expression PUNTOCOMA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                this.parser.cadena = "return ::= RETURN expression SEMICOLON \n"+this.parser.cadena;
                                RESULT=new Statement("return",e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_stmt ::= RETURN PUNTOCOMA 
            {
              Nodo RESULT =null;
		
                                this.parser.cadena = "return ::= RETURN SEMICOLON \n"+this.parser.cadena;
                                RESULT=new Statement("return");
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_stmt ::= FOR PARENT_IZQ expression COMA expression COMA expression PARENT_DER statement 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "for_stmt ::= FOR LCIRCLEB expression SEMICOLON expression SEMICOLON expression RCIRCLEB statement \n"+this.parser.cadena;
                                RESULT=new Statement("for",e1,e2,e3,s);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // while_stmt ::= WHILE PARENT_IZQ expression PARENT_DER statement 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "while_stmt ::= WHILE LCIRCLEB expression RCIRCLEB statement \n"+this.parser.cadena;
                                RESULT=new Statement("while",e,s);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iteration_stmt ::= for_stmt 
            {
              Nodo RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo fs = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "iteration_stmt ::= for_stmt \n"+this.parser.cadena;
                                RESULT=fs;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iteration_stmt ::= while_stmt 
            {
              Nodo RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo ws = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "iteration_stmt ::= while_stmt \n"+this.parser.cadena;
                                RESULT=ws;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // selection_stmt ::= IF PARENT_IZQ expression PARENT_DER statement ELSE statement 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo s1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo s2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "selection_stmt ::= IF LCIRCLEB expression RCIRCLEB statement ELSE statement \n"+this.parser.cadena;
                                RESULT=new Statement("if-else",e, s1, s2);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // selection_stmt ::= IF PARENT_IZQ expression PARENT_DER statement 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "selection_stmt ::= IF LCURLYB expression RCURLYB statement \n"+this.parser.cadena;
                                RESULT= new Statement("if", e, s);
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_stmt ::= PUNTOCOMA 
            {
              Nodo RESULT =null;
		
                                this.parser.cadena = "expression_stmt ::= PUNTOCOMA \n"+this.parser.cadena;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression_stmt ::= expression PUNTOCOMA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                this.parser.cadena = "expression_stmt ::= expression PUNTOCOMA \n"+this.parser.cadena;
                                RESULT=e;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= return_stmt 
            {
              Nodo RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo rs = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "statement ::= return_stmt \n"+this.parser.cadena;
                                RESULT=rs;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= iteration_stmt 
            {
              Nodo RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo is = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "statement ::= iteration_stmt \n"+this.parser.cadena;
                                RESULT=is;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= selection_stmt 
            {
              Nodo RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo ss = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "statement ::= selection_stmt \n"+this.parser.cadena;
                                RESULT=ss;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= compound_stmt 
            {
              Nodo RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo cs = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "statement ::= compound_stmt \n"+this.parser.cadena;
                                RESULT=cs;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= expression_stmt 
            {
              Nodo RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo es = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "statement ::= expression_stmt \n"+this.parser.cadena;
                                RESULT=es;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= 
            {
              ArrayList<Nodo> RESULT =null;
		
                                this.parser.cadena = "statement_list ::= EMPTY \n"+this.parser.cadena;
                                //se crea la lista de nodos de statements.
                                ArrayList<Nodo> list = new ArrayList<Nodo>();
                                RESULT=list;//se envia la lista creada.
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_list ::= statement_list statement 
            {
              ArrayList<Nodo> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> sl = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "statement_list ::= statement_list statement \n"+this.parser.cadena;
                                //condicionante usado si el nodo Statement es nulo.
                                if(s != null){
                                    sl.add(s);
                                }
                                RESULT=sl;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_declarations ::= 
            {
              ArrayList<Nodo> RESULT =null;
		
                                this.parser.cadena = "local_declarations ::= EMPTY \n"+this.parser.cadena;
                                //se crea la lista de nodos de variables locales.
                                ArrayList<Nodo> list = new ArrayList<Nodo>();
                                RESULT=list;//se envia la lista creada.
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_declarations",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // local_declarations ::= local_declarations var_declaration 
            {
              ArrayList<Nodo> RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> ld = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo vd = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "local_declarations ::= local_declarations var_declaration \n"+this.parser.cadena;
                                //condicionante usado si el nodo variable es nulo.
                                if(vd != null){
                                    ld.add(vd);
                                }
                                RESULT=ld;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_declarations",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // compound_stmt ::= LLAVE_IZQ local_declarations statement_list LLAVE_DER 
            {
              Nodo RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> ld = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> sl = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                this.parser.cadena = "compound_stmt ::= LCURLYB local_declarations statement_list RCURLYB \n"+this.parser.cadena;
                                RESULT= new Compound(ld,sl);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type_specifier ID CORCH_IZQ CORCH_DER 
            {
              Nodo RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                this.parser.cadena = "param ::= type_specifier ID CORCH_IZQ CORCH_DER \n"+this.parser.cadena;
                                //se crea el nodo parametro (parametro vector).
                                RESULT=new Param(ts, id, true);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param ::= type_specifier ID 
            {
              Nodo RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "param ::= type_specifier \n"+this.parser.cadena;
                                //se crea el nodo parametro.
                                RESULT=new Param(ts,id,false);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "param_list ::= param \n"+this.parser.cadena;
                                //creo el nodo de la funcion quen contendra la lista de parametros.
                                FunDec list= new FunDec();
                                //agrego el parametro a la lista del nodo.
                                list.agregarParametro(p);
                                RESULT=list;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= param_list COMA param 
            {
              Nodo RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo pl = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "param_list ::= param_list COMMA param \n"+this.parser.cadena;
                                //condicionante si el parametro no es nulo. en ese caso se agrega a la lista de paramentros del nodo Funcion.
                                if(p != null){
                                    ((FunDec)pl).agregarParametro(p);
                                }
                                RESULT=pl;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= VOID 
            {
              Nodo RESULT =null;
		
                                this.parser.cadena = "params ::= VOID \n"+this.parser.cadena;
                                //se crea el nodo directamente sin parametros.
                                RESULT=new FunDec(true);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // params ::= param_list 
            {
              Nodo RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo pl = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "params ::= param_list \n"+this.parser.cadena;
                                RESULT=pl;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fun_declaration ::= type_specifier ID PARENT_IZQ params PARENT_DER compound_stmt 
            {
              Nodo RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo ps = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo cs = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "fun_declaration ::= type_specifier ID LCIRCLEB params RCIRCLEB compound_stmt \n"+this.parser.cadena;
                                //ingreso la id al nodo anteriormente creado.
                                ((FunDec) ps).setID(id);
                                //ingreso el tipo de funcion al nodo anteriormente creado.
                                ((FunDec) ps).setTipoFunction(ts);

                                //condicionante usado si los componentes existen o no.
                                if(cs != null){
                                    ((FunDec) ps).setCompound_stmt(cs);
                                }
                                RESULT=(Nodo) ps;

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= VOID 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "type_specifier ::= VOID \n"+this.parser.cadena;
                                RESULT=v;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_specifier ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "type_specifier ::= INT \n"+this.parser.cadena;
                                RESULT=i;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_declaration ::= type_specifier ID CORCH_IZQ NUM CORCH_DER PUNTOCOMA 
            {
              Nodo RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                this.parser.cadena = "var_declaration ::= type_specifier ID LSQUAREB NUM RSQUAREB SEMICOLON \n"+this.parser.cadena;
                                if(ts.equalsIgnoreCase("int")){
                                    RESULT= new VarDec("INT", id, true, Integer.parseInt(num));
                                }else{
                                    RESULT=new VarDec("VOID", id, true, Integer.parseInt(num));
                                }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_declaration ::= type_specifier ID PUNTOCOMA 
            {
              Nodo RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                this.parser.cadena = "var_declaration ::= type_specifier ID SEMICOLON \n"+this.parser.cadena;
                                if(ts.equalsIgnoreCase("int")){
                                    RESULT= new VarDec("INT",id, false);
                                }else{
                                    RESULT=new VarDec("VOID",id, false);
                                }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= fun_declaration 
            {
              Nodo RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo fd = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "declaration ::= fun_declaration \n"+this.parser.cadena;
                                RESULT=fd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= var_declaration 
            {
              Nodo RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo vd = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "declaration ::= var_declaration \n"+this.parser.cadena;
                                RESULT=vd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration 
            {
              Program RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "declaration_list ::= declaration \n"+this.parser.cadena;
                                Program root = new Program();
                                root.agregarDeclaracion(d);
                                RESULT=root;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= declaration_list declaration 
            {
              Program RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program dl = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "declaration_list ::= declaration_list declaration \n"+this.parser.cadena;
                                if(d != null){
                                    dl.agregarDeclaracion(d);
                                }
                                RESULT=dl;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list 
            {
              Program RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Program dl = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                this.parser.cadena = "program ::= declaration_list \n"+this.parser.cadena;
                                System.out.println("Fin de analisis sintactico");
                                //System.out.println(this.parser.cadena);
                                RESULT = dl;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

